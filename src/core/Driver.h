#ifndef BASEDRIVER_H
#define BASEDRIVER_H

#include <string>
#include <core/PhantomGame.h>
#include <CompileConfig.h>
#include <core/Camera.h>
#include <core/Renderer.h>
#include <audio/AudioEngine.h>
#include <audio/Sounds.h>
#include <utils/PhantomException.h>
#include <input/Input.h>
#include <utils/Time.h>

using namespace std;

namespace phantom{
    class FreeTypeLibrary;
    class KeyboardListener;

    class LIBEXPORT Driver{
    public:
        Driver(PhantomGame* game);
        virtual ~Driver();

        /**
        * Change the window title of the game.
        *
        * @param title The new title to set.
        */
        virtual void setWindowTitle(string title);

        /**
        * Gets called from PhantomGame to initiate the driver update loop.
        *
        * @param time The time generated by PhantomGame.
        */
        virtual void onUpdate(PhantomTime time);
        
        /**
        * Gets called from PhantomGame to initiate the rendering.
        */
        virtual void onRender();

        /**
        * Creates a camera.
        */
        virtual Camera* createCamera() = 0;
        
        /**
        * @return Returns a list of active cameras.
        */
        vector<Camera*> *getActiveCameras();
        
        /**
        * Enables a camera.
        */
        void enableCamera(Camera *cam);

        /**
        * Disables a camera.
        */
        void disableCamera(Camera *cam);

        /**
        * @return Returns the input handler.
        */
        Input* getInput();
        
        /**
        * @return Returns the renderer.
        */
        Renderer *getRenderer();
        
        /**
        * @return Returns the sounds class. Used for playing sounds and music.
        */
        Sounds *getAudio();

        /**
        * @return Returns the audio engine.
        */
        AudioEngine *getAudioEngine();
        
        /**
        * @return Returns the TTF font library.
        */
        FreeTypeLibrary *getFontLibrary();

    protected:
        Renderer* _renderer;
        AudioEngine* _audioEngine;
        Sounds* _audio;
        FreeTypeLibrary* _fontLibrary;
        Input* _input;
        vector<Camera*> _cameras;
        vector<Camera*> _activeCameras;
        KeyboardListener *_keyboard;

        PhantomGame* _game;

        void addCamToList(Camera *cam);

    };
} /* namespace phantom */

#endif /* BASEDRIVER_H */